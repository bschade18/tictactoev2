{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","id","onClick","value","Board","state","squares","Array","fill","xIsNext","turn","this","setState","i","checkWinner","number","handleClick","status","winner","setTimeout","resetGame","renderSquare","React","Component","lines","length","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAUeA,MARf,SAAgBC,GACd,OACE,wBAAIC,UAAU,SAASC,GAAIF,EAAME,GAAIC,QAASH,EAAMG,SACjDH,EAAMI,QCgFEC,E,YAhFb,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KACDM,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,EACTC,KAAM,GALS,E,yEAUjBC,KAAKC,SAAS,CACZN,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAUE,KAAKN,MAAMI,QACrBC,KAAM,M,kCAIEG,GACV,IAAIP,EAAUK,KAAKN,MAAMC,QACrBQ,EAAYR,IAAYA,EAAQO,KAGpCP,EAAQO,GAAKF,KAAKN,MAAMI,QAAU,IAAM,IAExCE,KAAKC,SAAS,CACZN,QAASA,EACTG,SAAUE,KAAKN,MAAMI,QACrBC,KAAMC,KAAKN,MAAMK,KAAO,O,mCAIfG,EAAGE,GAAS,IAAD,OACtB,OACE,kBAAC,EAAD,CACEd,GAAIc,EACJZ,MAAOQ,KAAKN,MAAMC,QAAQO,GAC1BX,QAAS,kBAAM,EAAKc,YAAYH,Q,+BAK5B,IAIJI,EAJG,OAEHC,GADSP,KAAKN,MAAMI,QACXK,EAAYH,KAAKN,MAAMC,UAChCI,EAAOC,KAAKN,MAAMK,KAYtB,OAVIQ,GACFD,EAASC,EAAS,SAClBC,YAAW,kBAAM,EAAKC,cAAa,OACjB,IAATV,GACTO,GAAUN,KAAKN,MAAMI,QAAU,IAAM,KAAO,WAC5CU,YAAW,kBAAM,EAAKC,cAAa,OAEnCH,GAAUN,KAAKN,MAAMI,QAAU,IAAM,KAAO,WAI5C,yBAAKT,UAAU,SACb,yBAAKA,UAAU,UAAUiB,GACzB,yBAAKjB,UAAU,aACZW,KAAKU,aAAa,EAAG,QACrBV,KAAKU,aAAa,EAAG,OACrBV,KAAKU,aAAa,EAAG,QAExB,yBAAKrB,UAAU,aACZW,KAAKU,aAAa,EAAG,SACrBV,KAAKU,aAAa,EAAG,QACrBV,KAAKU,aAAa,EAAG,SAExB,yBAAKrB,UAAU,aACZW,KAAKU,aAAa,EAAG,OACrBV,KAAKU,aAAa,EAAG,SACrBV,KAAKU,aAAa,EAAG,UAExB,gD,GA3EYC,IAAMC,WAmF1B,SAAST,EAAYR,GAWnB,IAVA,IAAMkB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAX,EAAI,EAAGA,EAAIW,EAAMC,OAAQZ,IAAK,CAAC,IAAD,cACnBW,EAAMX,GADa,GAC9Ba,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAItB,EAAQoB,IAAMpB,EAAQoB,KAAOpB,EAAQqB,IAAMrB,EAAQoB,KAAOpB,EAAQsB,GACpE,OAAOtB,EAAQoB,GAGnB,OAAO,KC3FMG,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCIc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e06cdde1.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Square(props) {\n  return (\n    <td className=\"square\" id={props.id} onClick={props.onClick}>\n      {props.value}\n    </td>\n  );\n}\n\nexport default Square;\n","import React from \"react\";\n\nimport Square from \"./Square\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      turn: 0\n    };\n  }\n\n  resetGame() {\n    this.setState({\n      squares: Array(9).fill(null),\n      xIsNext: !this.state.xIsNext,\n      turn: 0\n    });\n  }\n\n  handleClick(i) {\n    let squares = this.state.squares;\n    if (checkWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      turn: this.state.turn + 1\n    });\n  }\n\n  renderSquare(i, number) {\n    return (\n      <Square\n        id={number}\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n\n  render() {\n    let player = this.state.xIsNext ? \"O\" : \"X\";\n    let winner = checkWinner(this.state.squares, player);\n    let turn = this.state.turn;\n    let status;\n    if (winner) {\n      status = winner + \" wins!\";\n      setTimeout(() => this.resetGame(), 1500);\n    } else if (turn === 9) {\n      status = (this.state.xIsNext ? \"X\" : \"O\") + \"'s turn!\";\n      setTimeout(() => this.resetGame(), 1500);\n    } else {\n      status = (this.state.xIsNext ? \"X\" : \"O\") + \"'s turn!\";\n    }\n\n    return (\n      <div className=\"board\">\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0, \"zero\")}\n          {this.renderSquare(1, \"one\")}\n          {this.renderSquare(2, \"two\")}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3, \"three\")}\n          {this.renderSquare(4, \"four\")}\n          {this.renderSquare(5, \"five\")}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6, \"six\")}\n          {this.renderSquare(7, \"seven\")}\n          {this.renderSquare(8, \"eight\")}\n        </div>\n        <h1>Tic-Tac-Toe</h1>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n\nfunction checkWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Board from \"./components/Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}