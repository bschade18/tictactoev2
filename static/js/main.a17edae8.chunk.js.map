{"version":3,"sources":["components/Square.js","components/Board.js","components/Gameplay.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","id","onClick","value","Board","renderSquare","i","number","squares","handleClick","this","Component","Gameplay","setSingleMode","setDoubleMode","App","resetGame","setState","Array","fill","turn","state","checkWinner","isPlayerTurn","xIsNext","isOnePLayer","setTimeout","cpuPlay","availSpots","emptySquares","slice","Math","floor","random","length","emptyIndeces","push","status","winner","lines","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a17edae8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Square(props) {\n  return (\n    <td className=\"square\" id={props.id} onClick={props.onClick}>\n      {props.value}\n    </td>\n  );\n}\n\nexport default Square;\n","import React, { Component } from \"react\";\nimport Square from \"./Square\";\n\nclass Board extends Component {\n  renderSquare = (i, number) => {\n    return (\n      <Square\n        id={number}\n        value={this.props.squares[i]}\n        onClick={() => this.props.handleClick(i)}\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"board\">\n        <div className=\"board-row\">\n          {this.renderSquare(0, \"zero\")}\n          {this.renderSquare(1, \"one\")}\n          {this.renderSquare(2, \"two\")}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3, \"three\")}\n          {this.renderSquare(4, \"four\")}\n          {this.renderSquare(5, \"five\")}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6, \"six\")}\n          {this.renderSquare(7, \"seven\")}\n          {this.renderSquare(8, \"eight\")}\n        </div>\n        <h1>Tic-Tac-Toe</h1>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\n\nfunction Gameplay(props) {\n  return (\n    <div className=\"gameplay\">\n      <p>How would you like to play?</p>\n      <button className=\"gameplay-btn\" onClick={props.setSingleMode}>\n        One Player\n      </button>\n      <button className=\"gameplay-btn\" onClick={props.setDoubleMode}>\n        Two Player\n      </button>\n    </div>\n  );\n}\n\nexport default Gameplay;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Board from \"./components/Board\";\nimport Gameplay from \"./components/Gameplay\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      isOnePLayer: null,\n      isPlayerTurn: null,\n      turn: 0\n    };\n  }\n\n  resetGame = () => {\n    this.setState({\n      squares: Array(9).fill(null),\n      turn: 0\n    });\n  };\n\n  handleClick = i => {\n    let squares = this.state.squares;\n    if (\n      checkWinner(squares) ||\n      squares[i] ||\n      this.state.isPlayerTurn === false\n    ) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      turn: this.state.turn + 1\n    });\n\n    if (this.state.isOnePLayer) {\n      this.setState({\n        isPlayerTurn: false\n      });\n      setTimeout(() => this.cpuPlay(), 1500);\n    }\n  };\n\n  cpuPlay = () => {\n    let availSpots = this.emptySquares();\n    let squares = this.state.squares.slice();\n\n    let randomIndex = availSpots[Math.floor(Math.random() * availSpots.length)];\n\n    squares[randomIndex] = this.state.xIsNext ? \"X\" : \"O\";\n\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      turn: this.state.turn + 1,\n      isPlayerTurn: true\n    });\n  };\n\n  emptySquares() {\n    let squares = this.state.squares.slice();\n    let emptyIndeces = [];\n    for (var i = 0; i < squares.length; i++) {\n      if (squares[i] === null) {\n        emptyIndeces.push(i);\n      }\n    }\n\n    return emptyIndeces;\n  }\n\n  setSingleMode = () => {\n    this.setState({\n      isOnePLayer: true\n    });\n  };\n\n  setDoubleMode = () => {\n    this.setState({\n      isOnePLayer: false\n    });\n  };\n\n  render() {\n    let player = this.state.xIsNext ? \"O\" : \"X\";\n    let winner = checkWinner(this.state.squares, player);\n    let turn = this.state.turn;\n    let status;\n    if (winner) {\n      status = winner + \" wins!\";\n      setTimeout(() => this.resetGame(), 1500);\n    } else if (turn === 9) {\n      status = \"DRAW!\";\n      setTimeout(() => this.resetGame(), 1500);\n    } else {\n      status = (this.state.xIsNext ? \"X\" : \"O\") + \"'s turn!\";\n    }\n    return (\n      <div className=\"App\">\n        {this.state.isOnePLayer === null ? (\n          <Gameplay\n            setSingleMode={this.setSingleMode}\n            setDoubleMode={this.setDoubleMode}\n          />\n        ) : (\n          <div>\n            <div className=\"status\">{status}</div>\n            <Board\n              xIsNext={this.state.xIsNext}\n              squares={this.state.squares}\n              turn={this.state.turn}\n              resetGame={this.resetGame}\n              renderSquare={this.renderSquare}\n              handleClick={i => this.handleClick(i)}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction checkWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}